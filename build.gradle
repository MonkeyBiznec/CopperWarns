plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

ext {
    minecraft_version = project.findProperty('minecraft_version') ?: '1.20.1'
    mod_id = project.findProperty('mod_id') ?: 'default_mod_id'
    mod_version = project.findProperty('mod_version') ?: '0.0.1'
    mod_group_id = project.findProperty('mod_group_id') ?: 'com.example'
    mod_name = project.findProperty('mod_name') ?: 'ModName'
    mod_authors = project.findProperty('mod_authors') ?: 'Author'
    mod_description = project.findProperty('mod_description') ?: 'Description'
    minecraft_version = project.findProperty('minecraft_version') ?: '1.20.1'
    forge_version = project.findProperty('forge_version') ?: '47.2.0'
    mapping_channel = project.findProperty('mapping_channel') ?: 'official'
    mapping_version = project.findProperty('mapping_version') ?: '1.20.1'
}

group = property('mod_group_id')
version = project.findProperty('mod_version') ?: getGitVersion() ?: '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets.main.java.srcDirs += 'build/generated/sources/annotationProcessor/java/main'
sourceSets.main.resources.srcDir 'src/generated/resources'

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/minecraft.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/tasks.gradle'

def getGitVersion() {
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'git', 'describe', '--tags', '--always'
            standardOutput = stdout
            ignoreExitValue = true
        }
        return stdout.toString().trim()
    } catch(Exception ignored) {
        return null
    }
}